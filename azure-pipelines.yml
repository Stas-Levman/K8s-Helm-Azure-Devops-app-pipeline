
resources:
  repositories: 
    - repository: NodsJS-web-app-with-Kubernetes-and-Helm
      type: github
      name: sincros121/NodsJS-web-app-with-Kubernetes-and-Helm
      ref: master
      endpoint: github.com_sincros121

trigger: none

pool: azure-vm

stages:
- stage: CI
  displayName: Build
  
  jobs:
  - job: Build
    displayName: Build image

    steps:
    - checkout: self
      displayName: Clone latest web-application repo

    - task: Docker@2
      displayName: Docker build
      inputs:
        containerRegistry: 'Private ACR'
        repository: 'bootcamp-app'
        command: 'build'
        Dockerfile: './Dockerfile'
        addPipelineData: false

  - job: PushImage
    displayName: Push image
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: Build

    steps:
    - checkout: none
    - task: Docker@2
      inputs:
        containerRegistry: 'Private ACR'
        repository: 'bootcamp-app'
        command: 'push'
        tags: '$(Build.BuildId)'
    
  - job: PackageChart
    displayName: Package and push chart
    dependsOn: PushImage

    steps: 
    - checkout: NodsJS-web-app-with-Kubernetes-and-Helm
      displayName: Clone Helm chart repo

    - task: AzureCLI@2
      displayName: Login to ACR
      inputs:
        azureSubscription: 'k8s-rg'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login -n staslregistry

    - task: DownloadSecureFile@1
      name: stage_values
      displayName: Download chart values file
      inputs:
        secureFile: 'stage-values.yaml'

    - script: |
         helm dependency update ./
      displayName: Update chart dependencies
  
    - script: |
        helm lint ./ -f "$(stage_values.secureFilePath)"
      displayName: Check chart validity

    - script: |
        helm package ./ --version $(Build.BuildId) --destination ./packages
      displayName: Package Helm chart

    - script: |
        helm push ./packages/web-app-chart-$(Build.BuildId).tgz oci://staslregistry.azurecr.io
      displayName: Push Helm package to ACR
    
    

- stage: Stage_deployment
  displayName: Deployment

  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: CI
  
  variables: 
  - name: ip_address
    value: $(az network public-ip list -g web-app-k8s-resources --query "[?tags.service].ipAddress | [0]" | tr -d '"')

  jobs:
  - deployment: deployToStage
    environment: stage
    variables:
    - group: stage-vars
    - name: releaseName
      value: web-app-stage
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            name: stage_values
            timeoutInMinutes: 2
            displayName: Download chart values file
            inputs:
              secureFile: 'stage-values.yaml'

          # Install nginx contorller first to obtain application public IP to pass to app containers env variables
          - script: |
              helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
              helm repo update
              helm upgrade --install nginx-controller ingress-nginx/ingress-nginx \
                --namespace stage --create-namespace \
                --set controller.setAsDefaultIngress=true \
                --atomic
            displayName: Install nginx controller to get public IP for the application environment variable

          - script: |
              helm upgrade --install --namespace stage --create-namespace $(releaseName) oci://staslregistry.azurecr.io/web-app-chart \
                -f "$(stage_values.secureFilePath)" \
                --version $(Build.Build.Id) \
                --set controller.setAsDefaultIngress=true \
                --set webApp.spec.imagetag=$(Build.Build.Id) \
                --set ip_address=$(ip_address) \
                --timeout 2m \
                --atomic 
            displayName: Deploy web application

          - template: templates/Okta-API-call-stage.yaml

          - script: |
              echo $(ip_address)
            displayName: Display ingress IP for access to application
